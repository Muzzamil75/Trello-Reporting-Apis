{"version":3,"sources":["components/Hoc/auth.js","components/Luna/login.js","utils/constants.js","components/Luna/Dashboard.js","utils/Helpers/TimeCoverter.js","components/Luna/TextStrings.js","components/Luna/Reporting.js","utils/Helpers/CalculateDateExistance.js","routes/index.js","container/App/index.js","serviceWorker.js","redux/Store/reducer.js","index.js"],"names":["this","authenticated","callback","ADMINDETAIL","Login","props","getFields","type","value","setState","username","toUpperCase","password","handleSubmit","e","state","auth","login","history","push","alert","preventDefault","userName","className","action","id","novalidate","htmlFor","placeholder","title","onChange","target","onClick","href","Component","API_KEY","TOKEN","Dashboard","fetchBoards","fetch","then","res","json","boards","boardsData","array","selectedBoardId","selectedBoardName","name","fetchListWithCardsAgainstBoardId","catch","console","log","boardId","lists","listData","finally","calculation","a","arr","forEach","ele","obj","listId","listName","cards","length","cardsWithIds","count","membersData","person","list","singleCard","filter","ct","map","taskCount","fetchMembersOfBoard","members","UpdateDashboardSection","key","boardName","selectedBoardNo","showReports","item","pathname","search","src","alt","data-toggle","fullName","style","background","border","width","height","msToTime","duration","parseInt","Math","floor","minutes","hours","days","months","TextStrings","memberName","makeLocaleTimezone","time","Date","applyColor","toLocaleString","Time","DateColor","started","ended","b","diff","abs","TimeDifference","hasOwnProperty","previousTime","creationTime","updatedTime","paddingTop","cardName","oldCardName","before","after","assignedTo","deAllocatorName","commentorName","comment","renderString","text","color","Reporting","location","parsed","queryString","parse","fetchActionsAgainstMemberId","memberId","data","el","board","allActions","filterTheActions","checkDateRange","startDate","endDate","dateFrom","replace","dateTo","from","getFullYear","getMonth","getDate","to","actionsBtwDays","dateCheck","check","triggered","handleFilterBtn","isPeriodSelected","JSON","stringify","filteredActions","actions","memberCreator","old","card","date","due","oldDueDate","newDueDate","cardId","listBefore","listAfter","comparisonWith","dateToCheck","getHours","getMinutes","getSeconds","DateIsGreater","closed","oldListName","member","assignedMemberId","taskAssigner","taskAssignerId","deAllocatorId","commentorId","padding","utils","MomentUtils","Grid","container","justify","flexDirection","keyboard","format","mask","disableOpenOnEnter","animateYearScrolling","autoOk","clearable","marginTop","withStyles","grid","Routes","path","component","exact","App","Boolean","window","hostname","match","initialState","age","Reducer","newState","store","createStore","reducer","applyMiddleware","thunk","navigator","serviceWorker","ready","registration","unregister","error","message","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4b95b386.chunk.js","sourcesContent":["class Auth {\n  constructor() {\n    this.authenticated = false;\n  }\n  login(callback) {\n    this.authenticated = true;\n    callback();\n  }\n  logout(callback) {\n    this.authenticated = false;\n    callback()\n  }\n  isAuthenticated() {\n    return this.authenticated\n  }\n}\nexport default new Auth();","\nimport React, { Component } from 'react'\nimport auth from '../Hoc/auth';\n\nconst ADMINDETAIL = {\n    username: 'MUZAMIL',\n    password: 123\n}\n\nexport default class Login extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            userName: null,\n            password: null\n        };\n    }\n\n    getFields = (type, value) => {\n        if (type === 'username') {\n            this.setState({ username: value.toUpperCase() })\n        }\n        else if (type === 'password') {\n            this.setState({ password: value.toUpperCase() })\n        }\n    }\n\n    handleSubmit = (e) => {\n        const { username, password } = this.state\n        if (!!username && !!password) {\n            if (username === ADMINDETAIL.username && password == ADMINDETAIL.password) {\n                auth.login(() => this.props.history.push('/dashboard'))\n            }\n            else {\n                alert('Not authorized')\n            }\n        }\n        e.preventDefault()\n    }\n    render() {\n        return (\n            <div className=\"wrapper\">\n                <section className=\"content-s\">\n                    <div className=\"container-center animated slideInDown\">\n                        <div className=\"view-header\">\n                            <div className=\"header-icon\">\n                                <i className=\"pe page-header-icon pe-7s-unlock\"></i>\n                            </div>\n                            <div className=\"header-title\">\n                                <h3>Login</h3>\n                                <small>\n                                    Please enter your credentials to login.\n                             </small>\n                            </div>\n                        </div>\n\n                        <div className=\"panel panel-filled\">\n                            <div className=\"panel-body\">\n                                <form action=\"index.html\" id=\"loginForm\" novalidate>\n                                    <div className=\"form-group\">\n                                        <label className=\"col-form-label\" htmlFor=\"username\">Username</label>\n                                        <input type=\"text\" placeholder=\"example@gmail.com\" title=\"Please enter you username\"\n                                            onChange={e => this.getFields('username', e.target.value)} className=\"form-control\" />\n                                        <span className=\"form-text small\">Your unique username to app</span>\n                                    </div>\n                                    <div className=\"form-group\">\n                                        <label className=\"col-form-label\" htmlFor=\"password\">Password</label>\n                                        <input type=\"password\" title=\"Please enter your password\" placeholder=\"******\"\n                                            onChange={e => this.getFields('password', e.target.value)} className=\"form-control\" />\n                                        <span className=\"form-text small\">Your strong password</span>\n                                    </div>\n                                    <div>\n                                        <button className=\"btn btn-accent\" onClick={this.handleSubmit}>Login</button>\n                                        <a className=\"btn btn-default\" href=\"register.html\">Register</a>\n                                    </div>\n                                </form>\n                            </div>\n                        </div>\n\n                    </div>\n                </section>\n            </div>\n        )\n    }\n}\n\n\n","export const API_KEY = 'f185658707ae3b2d431801916e197bcd';\nexport const TOKEN = '6b5f1e12474c76bc6b4171ed92f08c27ddc4facd1866015e9c688fc68d51ca40';\n","/* eslint-disable no-unused-expressions */\nimport React, { Component } from 'react'\nimport { API_KEY, TOKEN } from '../../utils/constants';\n\nexport default class Dashboard extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            boardsData: {\n                array: null,\n                selectedBoardNo: null,\n                selectedBoardId: null,\n                selectedBoardName: null,\n            },\n            listData: {\n                array: null\n            },\n            membersData: {\n                array: null\n            },\n            cardsWithIds: [],\n            taskCount: null\n        };\n    }\n    // Fetching the boards\n    fetchBoards = () => {\n        fetch(`https://api.trello.com/1/members/me/boards?key=${API_KEY}&token=${TOKEN}`)\n            .then(res => res.json())\n            .then((boards) => {\n                this.setState({\n                    boardsData: {\n                        ...this.state.boardsData,\n                        array: boards,\n                        selectedBoardId: boards[0].id,\n                        selectedBoardName: boards[0].name\n                    }\n                })\n                this.fetchListWithCardsAgainstBoardId(boards[0].id);\n            })\n            .catch(console.log)\n    }\n    // Done\n    fetchListWithCardsAgainstBoardId = boardId => {\n        fetch(`https://api.trello.com/1/boards/${boardId}/lists?cards=open&card_fields=all&filter=open&fields=all&key=${API_KEY}&token=${TOKEN}`)\n            .then(res => res.json())\n            .then((lists) => {\n                // console.log(lists)\n                this.setState({\n                    listData: {\n                        ...this.state.listData,\n                        array: lists,\n                    }\n                })\n            })\n            .catch(console.log)\n            .finally(() => this.calculation())\n    };\n\n    calculation = async () => {\n        const arr = [];\n        console.log('liiiiiiiiiiiiiiiiiiii data with ids -->', this.state.listData.array)\n\n        // getting out required information from the list\n        await this.state.listData.array && this.state.listData.array.forEach(ele => {\n            let obj = {}\n            obj.listId = ele.id;\n            obj.listName = ele.name;\n            if (ele.cards.length > 0) {\n                obj.cards = ele.cards;\n                // var cards=[];\n                // \tele.cards.forEach(card => {\n                //     obj.idBoard = card.idBoard;\n                // \t\tobj.cardId = card.id;\n                // \t\tobj.dueDate = card.due;\n                // \t\tobj.dueComplete = card.dueComplete;\n                // \t\tobj.cardName= card.name;\n                // \t\tobj.cardStatus= card.closed;\n                // \t\tobj.dateLastActivity = card.dateLastActivity;\n                //     obj.idMembers = card.idMembers;\n                // \t\tobj.labels = card.labels;\n                // \t\tcards.push(obj)\n                // })\n            }\n            else {\n                obj.cards = null\n            }\n            arr.push(obj);\n        });\n        this.setState({ cardsWithIds: arr });\n\n        // TODO \n        // making array of cards count for each person\n        let count = [];\n        await this.state.membersData.array && this.state.membersData.array.forEach(person => {\n            arr.forEach(list => {\n                list.cards ?.forEach(singleCard => {\n                    if (count.filter(ct => ct.id === singleCard).length) {\n                        count.map(ct => {\n                            if (ct.id === singleCard) {\n                                ct.count++;\n                            }\n                        })\n                    } else {\n                        count.push({ count: 1, singleCard })\n                    }\n\n                })\n            });\n        })\n        // console.log('checkkkkkkkkkkkkkkkkkk', count)\n        this.setState({ taskCount: count })\n        // console.log('mmmmmmmm',this.state.membersData.array)\n\n        // let obj={}\n        // this.state.membersData.array?.forEach(member=>{\n        //     count.forEach(item=>{\n        //         if(item.id===member.id){\n        //              obj = {\n        //                 ...this.state.membersData,\n        //                 noOfCardsAssigned:item.count\n        //             }\n        //         }\n        //         console.log(obj)\n        //     })\n        // })\n        // // this.setState({membersData : {...this.state.membersData,cardsCount}})\n        // console.log('Coiunt',count)\n    };\n\n    // TODO \n    // getTasks = ({ id, fullName, ...rest }) => {\n    //     let task = this.state.taskCount.filter(el => {\n    //         if (id === el.id) {\n    //             return true;\n\n    //         }\n    //         return false\n    //     })\n    //     return task[0] ?.count || \"0\"\n    // }\n\n    fetchMembersOfBoard = (boardId) => {\n        fetch(`https://api.trello.com/1/boards/${boardId}/members?key=${API_KEY}&token=${TOKEN}`)\n            .then(res => res.json())\n            .then((members) => {\n                // console.log('Memerbers ->', members)\n                this.setState({\n                    membersData: {\n                        ...this.state.membersData,\n                        array: members,\n                    }\n                })\n            })\n            .catch(console.log)\n    }\n    UpdateDashboardSection = (key, boardName, boardId) => {\n        this.fetchMembersOfBoard(boardId);\n        this.fetchListWithCardsAgainstBoardId(boardId);\n        this.setState({\n            boardsData: {\n                ...this.state.boardsData,\n                selectedBoardName: boardName,\n                selectedBoardNo: key,\n                selectedBoardId: boardId\n            }\n        })\n    }\n\n    showReports = (item) => {\n        let boardId = this.state.boardsData.selectedBoardId\n        this.props.history.push({\n            pathname: '/reports',\n            search: `?boardId=${boardId}&memberId=${item.id}`,\n        })\n    };\n\n    // totalCards =count=>{\n    //     console.log('cccccccccccccccc',count)\n    //     let cards;\n    //      cards =count++;\n    //      return cards\n    // }\n\n    componentDidMount() {\n        this.fetchBoards();\n    }\n    render() {\n        const { boardsData, listData, membersData, selectedBoardNo, count } = this.state;\n        return (\n            <div className=\"wrapper\">\n                <nav className=\"navbar navbar-expand-md navbar-default fixed-top\">\n                    <div className=\"navbar-header\">\n                        <div id=\"mobile-menu\">\n                            <div className=\"left-nav-toggle\">\n                                <a href=\"#\">\n                                    <i className=\"stroke-hamburgermenu\"></i>\n                                </a>\n                            </div>\n                        </div>\n                        <a className=\"navbar-brand\" href=\"index.html\">\n                            Crewlogix\n                      <span>v.1.4</span>\n                        </a>\n                    </div>\n                    <div id=\"navbar\" className=\"navbar-collapse collapse\">\n                        <div className=\"left-nav-toggle\">\n                            <a href=\"\">\n                                <i className=\"stroke-hamburgermenu\"></i>\n                            </a>\n                        </div>\n                        <form className=\"navbar-form mr-auto\">\n                            <input type=\"text\" className=\"form-control\" placeholder=\"Project Reporting Tool\" />\n                        </form>\n                        <ul className=\"nav navbar-nav\">\n\n                            <li className=\"nav-item profil-link\">\n                                <a href=\"login.html\">\n                                    <span className=\"profile-address\">origamiStudios</span>\n                                    <img src=\"images/profile.jpg\" className=\"rounded-circle\" alt=\"\" />\n                                </a>\n                            </li>\n                        </ul>\n                    </div>\n                </nav>\n\n                <aside className=\"navigation\">\n                    <nav>\n                        <ul className=\"nav luna-nav\">\n                            <li className=\"nav-category\">\n                                All Projects\n                      </li>\n                            {!!boardsData.array && boardsData.array.map((item, key) => {\n                                return (\n                                    <li className='in-active' data-toggle=\"collapse\" key={key}>\n                                        <a onClick={() => this.UpdateDashboardSection(key, item.name, item.id)}>{item.name}</a>\n                                    </li>\n                                )\n                            })}\n\n                            <li className=\"nav-info\">\n                                <i className=\"pe pe-7s-shield text-accent\"></i>\n\n                                <div className=\"m-t-xs\">\n                                    <span className=\"c-white\">Trello Reporting Tool</span>\n                                </div>\n                            </li>\n                        </ul>\n                    </nav>\n                </aside>\n\n                <section className=\"content\">\n                    <div className=\"container-fluid\">\n                        <div className=\"row\">\n                            <div className=\"col-lg-12\">\n                                <div className=\"view-header\">\n                                    <div className=\"header-icon\">\n                                        <i className=\"pe page-header-icon pe-7s-shield\"></i>\n                                    </div>\n                                    <div className=\"header-title\">\n                                        <h3 className=\"m-b-xs\">{boardsData.selectedBoardName}</h3>\n                                    </div>\n                                </div>\n                                <hr />\n                            </div>\n                        </div>\n                        <div className=\"row\">\n                            {!!listData.array && listData.array.map((item, key) => {\n                                return (\n                                    <div className=\"col-lg-2 col-xs-6\" key={key}>\n                                        <div className=\"panel panel-filled\">\n                                            <div className=\"panel-body\">\n                                                <h2 className=\"m-b-none\">\n                                                    {item.cards && item.cards.length} <span className=\"slight\"></span>\n                                                </h2>\n                                                <div className=\"small\">{item.name}</div>\n                                            </div>\n                                        </div>\n                                    </div>\n                                )\n                            })}\n\n                        </div>\n                        <div className=\"row\">\n                            <div className=\"col-md-8\">\n                                <div className=\"panel panel-filled\">\n                                    <div className=\"panel-body\">\n                                        <table className=\"table table-responsive-sm\">\n                                            <thead>\n                                                <tr>\n                                                    <th>Name</th>\n                                                    <th>No of Tasks Assigned</th>\n                                                    <th>Reports</th>\n                                                </tr>\n                                            </thead>\n                                            <tbody>\n                                                {!!membersData.array && membersData.array.map((item, key) => {\n                                                    return (\n                                                        <tr>\n                                                            <td>{item.fullName}</td>\n                                                            {/* <td>{this.getTasks(item)}</td> */}\n                                                            <td><button\n                                                                style={{ background: '#f6a821', border: '1px solid #f6a821', width: '100px', height: '30px' }}\n                                                                onClick={() => this.showReports(item)}>Get Reports</button></td>\n                                                        </tr>\n                                                    )\n                                                })}\n                                            </tbody>\n                                        </table>\n                                    </div>\n                                </div>\n                            </div>\n                            <div className=\"col-md-4\">\n                                <div className=\"panel panel-b-accent\">\n                                    <div className=\"panel-body text-center p-m\">\n                                        <h2 className=\"font-light\">\n                                            Total 43 Cards\n                                  </h2>\n                                        <div className=\"sparkline7 m-t-xs\"></div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </section>\n            </div>\n        )\n    }\n}","const TimeDifference = (started, ended) => {\n  var a = new Date(started)\n  var b = new Date(ended)\n  var diff = Math.abs(a - b);\n  return msToTime(diff)\n}\nconst msToTime = (duration) => {\n  var milliseconds = parseInt((duration % 1000) / 100),\n    seconds = Math.floor((duration / 1000) % 60),\n    minutes = Math.floor((duration / (1000 * 60)) % 60),\n    hours = Math.floor((duration / (1000 * 60 * 60)) % 24),\n    days = Math.floor((duration / (1000 * 60 * 60 * 24)) % 30),\n    months = Math.floor((duration / (1000 * 60 * 60 * 24 * 30)) % 12);\n  if(months > 0){\n    return `${months} months , ${days} days , ${hours} hours , ${minutes} minutes`\n  }\n  else if (days > 0){\n    return `${days} day ${hours} hours and ${minutes} minutes`\n  }\n  else if (hours > 0){\n    return `${hours} hours and ${minutes} minutes`\n  }\n  else if (minutes > 0){\n    return `${minutes} minutes`\n  }\n}\n\nexport  { TimeDifference ,msToTime };","import React from 'react'\nimport { TimeDifference } from '../../utils/Helpers/TimeCoverter'\n\nconst TextStrings = ({ item, memberName }) => {\n  const makeLocaleTimezone = time => {\n    var time = new Date(time)\n    return applyColor(time.toLocaleString())\n  }\n\n  const Time = (item) => {\n   return DateColor(TimeDifference(item.hasOwnProperty(\"previousTime\") ? item.previousTime : item.creationTime, item.updatedTime))\n  }\n  const renderString = item => {\n    switch (item.type) {\n      case 'cardCreated':\n        return <h4>{memberName} created card  {applyColor(item.cardName)}  in  {applyColor(item.listName)} at {makeLocaleTimezone(item.updatedTime)}   </h4>;\n        break;\n      case 'listCreated':\n        return <h4>{memberName} created list  {applyColor(item.listName)} </h4>;\n        break;\n      case 'cardRenamed':\n        return <h4>{memberName} renamed the card from  {applyColor(item.oldCardName)}  to  {applyColor(item.cardName)}</h4>;\n        break;\n      case 'cardMoved':\n        return <h4>{memberName} moved card {applyColor(item.cardName)} from {applyColor(item.before)} to {applyColor(item.after)} at {makeLocaleTimezone(item.updatedTime)} after {Time(item)}   </h4>;\n        break;\n      case 'memberAddedToCard':\n        return <h4>{memberName} assigned {applyColor(item.cardName)} to {item.assignedTo} at {makeLocaleTimezone(item.updatedTime)} </h4>;\n        break;\n      case \"memberRemovedFromCard\":\n        return <h4>{item.deAllocatorName} removed {applyColor(item.memberName)} from the card {item.cardName} at {makeLocaleTimezone(item.updatedTime)} </h4>;\n        break;\n      case \"cardCommented\":\n        return <h4>{item.commentorName} commented on the card  {applyColor(item.cardName)} as '{applyColor(item.comment)}'</h4>;\n        break;\n      default:\n        break\n      // hellow\n    }\n  }\n\n  return (\n    <ul style={{ paddingTop: 0 }}>\n      <li>{renderString(item)}</li>\n    </ul>\n  )\n}\n\nconst DateColor = text  => {\n \n  return <span style={{ color: 'rgb(64, 255, 105)' }}>{text}</span>\n}\n\n\nconst applyColor = text => {\n  return <span style={{ color: '#ffdf40' }}>{text}</span>\n}\n\nexport { applyColor , TextStrings}","/* eslint-disable no-unused-expressions */\nimport React, { Component } from 'react'\nimport queryString from 'query-string';\nimport {\n  MuiPickersUtilsProvider,\n  TimePicker,\n  DatePicker\n} from \"material-ui-pickers\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport MomentUtils from \"@date-io/moment\";\nimport { TextStrings, applyColor } from './TextStrings';\nimport { checkDateRange, DateIsGreater } from '../../utils/Helpers/CalculateDateExistance';\nimport { API_KEY, TOKEN } from '../../utils/constants';\n\nconst styles = {\n  grid: {\n    width: \"20%\"\n  }\n};\nclass Reporting extends Component {\n  constructor(props) {\n    const { location: { search } } = props;\n    const parsed = queryString.parse(search);\n    super(props);\n    this.state = {\n      allActions: null,\n      boardId: parsed.boardId,\n      memberId: parsed.memberId,\n      filteredActions: null,\n      startDate: null,\n      endDate: null,\n      actionsBtwDays: [],\n      triggered: false,\n      isPeriodSelected: false,\n      memberName: '',\n      boardName: ''\n    }\n  }\n  // Only Actions API\n  fetchActionsAgainstMemberId = (memberId, boardId) => {\n    fetch(`https://api.trello.com/1/members/${memberId}/actions?key=${API_KEY}&token=${TOKEN}&fields=all`)\n      .then(res => res.json())\n      .then((data) => {\n        let arr = []\n        // getting the actions of the specific selected BOARD through query params\n        data.forEach(el => {\n          if (el.data.board.id === boardId) {\n            arr.push(el)\n          }\n        })\n        // ALL the actions of the board \n        this.setState({ allActions: arr }, () => {\n          this.filterTheActions();\n        })\n      })\n      .catch(console.log)\n  };\n\n  // fetchCardActionsAgainstCardId = (cardId) => {\n  //   fetch(`https://api.trello.com/1/cards/${cardId}/actions?key=${API_KEY}&token=${TOKEN}&filter=all`)\n  //     .then(res => res.json())\n  //     .then((data) => {\n  //       let arr = [];\n  //       let i = 0;\n  //       arr.push(data)\n\n  //       // data.forEach(el => {\n  //       //   console.log(`${el.data.card.name} is moved from ${el.data.listBefore.name} to  ${el.data.listAfter.name}`)\n  //       // })\n  //       // console.log('aaaa type',data)\n  //       //   for ( i = data.length ; i  >= 0 ; i-- ){\n\n  //       //   }\n  //       this.setState({ cardActions: arr }, () => console.log('cardActionssssssssssssss', this.state.cardActions))\n\n  //       // let reversedArr = data.reverse();\n  //       // console.log('bbbb',reversedArr)\n\n\n  //       // this.setState({ allActions: arr }, () => {\n  //       //   this.filterTheActions();\n  //       // })\n  //     })\n  //     .catch(console.log)\n  // };\n\n  componentWillUnmount() {\n    this.setState({ allActions: [] })\n  }\n\n  // check if date exists between the two data and returned the existant data\n  checkDateRange = (startDate, endDate, data) => {\n    var dateFrom = new Date(startDate.replace(/\"/g, ''));\n    var dateTo = new Date(endDate.replace(/\"/g, ''));\n    var from = new Date(\n      dateFrom.getFullYear(),\n      dateFrom.getMonth() - 1,\n      dateFrom.getDate(),\n    );\n    var to = new Date(\n      dateTo.getFullYear(),\n      dateTo.getMonth() - 1,\n      dateTo.getDate(),\n    );\n    var actionsBtwDays = [];\n    data.forEach(el => {\n      let dateCheck = new Date(el.updatedTime);\n      let check = new Date(\n        dateCheck.getFullYear(),\n        dateCheck.getMonth() - 1,\n        dateCheck.getDate(),\n      );\n      if (check >= from && check <= to) {\n        actionsBtwDays.push(el)\n      }\n    })\n    this.setState({ actionsBtwDays, triggered: true });\n  };\n\n  handleFilterBtn = () => {\n    const { startDate, endDate } = this.state\n    if (!!startDate && !!endDate) {\n      this.setState({ isPeriodSelected: true })\n      this.checkDateRange(JSON.stringify(this.state.startDate), JSON.stringify(this.state.endDate), this.state.filteredActions)\n    }\n    else {\n      alert('Select the period range')\n      this.setState({ isPeriodSelected: false })\n    }\n  };\n\n  filterTheActions = () => {\n    let actions = [...this.state.allActions];\n    let filteredActions = [];\n    console.log('actionsss', actions)\n    this.setState({ memberName: actions[0].memberCreator.username, boardName: actions[0].data.board.name })\n\n    // making a specific array of objects from the ALLactions array\n    actions.forEach(ele => {\n      let obj = {}\n      if (ele.type === 'updateCard') {\n        if (ele.data.old.name) {\n          obj.type = 'cardRenamed';\n          obj.oldCardName = ele.data.old.name;\n          obj.cardName = ele.data.card.name;\n          obj.listId = ele.data.list.id;\n          obj.listName = ele.data.list.name;\n          obj.updatedTime = ele.date;\n          filteredActions.push(obj)\n        }\n        else if (ele.data.old.due) {\n          obj.type = 'dueDateChanged';\n          obj.oldDueDate = ele.data.old.due;\n          obj.newDueDate = ele.data.card.due;\n          obj.cardId = ele.data.card.id;\n          obj.cardName = ele.data.list.name;\n          obj.listName = ele.data.list.name;\n          obj.updatedTime = ele.date;\n          filteredActions.push(obj)\n        }\n        else if (ele.data.listBefore) {\n          obj.type = 'cardMoved';\n          obj.before = ele.data.listBefore.name;\n          obj.after = ele.data.listAfter.name;\n          obj.cardName = ele.data.card.name;\n          obj.cardId = ele.data.card.id;\n          obj.updatedTime = ele.date;\n\n          actions.filter((item) => {\n            // getting the exact card by id and finding its creation date\n            if (item.data.card ?.id === ele.data.card.id && item.type === 'createCard') {\n              obj.creationTime = item.date;\n            }\n            // getting the time of stay within the list // TODO\n            else if (item.data.card ?.id === ele.data.card.id && item.type === 'updateCard') {\n              if (item.data.listAfter ?.id === ele.data.listBefore.id && DateIsGreater(ele.date,item.date)) {\n                  obj.previousTime= item.date;\n              }\n            }\n          })\n          filteredActions.push(obj)\n        }\n\n      }\n      if (ele.type === 'createCard') {\n        obj.type = 'cardCreated';\n        obj.cardName = ele.data.card.name;\n        obj.cardId = ele.data.card.id;\n        obj.listId = ele.data.list.id;\n        obj.listName = ele.data.list.name;\n        obj.updatedTime = ele.date;\n        filteredActions.push(obj)\n      }\n      //Done\n      else if (ele.type === 'createList') {\n        obj.type = 'listCreated';\n        obj.listId = ele.data.list.id;\n        obj.listName = ele.data.list.name;\n        obj.updatedTime = ele.date;\n        filteredActions.push(obj)\n      }\n      else if (ele.type === 'updateList') {\n        if (ele.data.list.closed) {\n          obj.type = 'listClosed';\n          obj.listName = ele.data.list.name;\n          obj.updatedTime = ele.date;\n          filteredActions.push(obj)\n        }\n        if (ele.data.old.name && !ele.data.list.closed) {\n          obj.type = 'listRenamed';\n          obj.listName = ele.data.list.name;\n          obj.oldListName = ele.data.old.name;\n          obj.listId = ele.data.list.id;\n          obj.updatedTime = ele.date;\n          filteredActions.push(obj)\n        }\n      }\n      // else if (ele.type === \"addMemberToBoard\"){\n      //   obj.type = 'memberAddedToBoard';\n      //   obj.boardName = ele.data.board.name;\n      //   obj.boardId = ele.data.board.id;\n      //   obj.invitorName = ele.memberCreator.fullName;\n      //   obj.invitorId = ele.memberCreator.id;\n      //   obj.memberName = ele.member.fullName;\n      //   obj.memberId = ele.member.id;\n      //   obj.updatedTime = ele.date;\n      //   filteredActions.push(obj)\n      // }\n      else if (ele.type === \"addMemberToCard\") {\n        obj.type = 'memberAddedToCard';\n        obj.cardName = ele.data.card.name;\n        obj.cardId = ele.data.card.id;\n        obj.assignedTo = ele.data.member.name;\n        obj.assignedMemberId = ele.data.member.id;\n        obj.taskAssigner = ele.memberCreator.fullName;\n        obj.taskAssignerId = ele.memberCreator.id;\n        obj.updatedTime = ele.date;\n        filteredActions.push(obj)\n      }\n      // Done\n      else if (ele.type === \"removeMemberFromCard\") {\n        obj.type = 'memberRemovedFromCard';\n        obj.cardName = ele.data.card.name;\n        obj.cardId = ele.data.card.id;\n        obj.memberName = ele.data.member.name;\n        obj.memberId = ele.data.member.id;\n        obj.deAllocatorName = ele.memberCreator.fullName;\n        obj.deAllocatorId = ele.memberCreator.id;\n        obj.updatedTime = ele.date;\n        filteredActions.push(obj)\n      }\n      // Done\n      else if (ele.type === \"commentCard\") {\n        obj.type = 'cardCommented';\n        obj.cardName = ele.data.card.name;\n        obj.cardId = ele.data.card.id;\n        obj.listName = ele.data.list.name;\n        obj.listId = ele.data.list.id;\n        obj.comment = ele.data.text;\n        obj.commentorName = ele.memberCreator.fullName;\n        obj.commentorId = ele.memberCreator.id;\n        obj.updatedTime = ele.date;\n        filteredActions.push(obj)\n      }\n    })\n    console.log('to show', filteredActions)\n    this.setState({ filteredActions })\n  }\n  componentDidMount() {\n    this.fetchActionsAgainstMemberId(this.state.memberId, this.state.boardId)\n  }\n  render() {\n    const { allActions, startDate, endDate, boardName, actionsBtwDays, triggered, isPeriodSelected, memberName } = this.state\n    return (\n      <div style={{ padding: 45 }}>\n        <h1>All actions of {applyColor(memberName)} on Board {applyColor(boardName)}</h1>\n        <ul className=\"nav luna-nav\">\n          {!!allActions && allActions.map((item, key) => {\n            return (\n              <li>{item.type}</li>\n            )\n          })}\n        </ul>\n        <hr />\n        <h1>Filter</h1>\n        <MuiPickersUtilsProvider utils={MomentUtils}>\n          <Grid container justify=\"space-evenly\">\n            <div style={{ flexDirection: 'column' }}>\n              <h1>From date</h1>\n              <DatePicker\n                keyboard\n                placeholder=\"MM/DD/YYYY\"\n                format={\"MM/DD/YYYY\"}\n                mask={value =>\n                  value\n                    ? [/\\d/, /\\d/, \"/\", /\\d/, /\\d/, \"/\", /\\d/, /\\d/, /\\d/, /\\d/]\n                    : []\n                }\n                value={startDate}\n                onChange={(e) => this.setState({ startDate: e })}\n                disableOpenOnEnter\n                animateYearScrolling={false}\n                autoOk={true}\n                clearable\n              />\n            </div>\n            <div style={{ flexDirection: 'column' }}>\n              <h1>To date</h1>\n              <DatePicker\n                keyboard\n                placeholder=\"MM/DD/YYYY\"\n                format={\"MM/DD/YYYY\"}\n                mask={value =>\n                  value\n                    ? [/\\d/, /\\d/, \"/\", /\\d/, /\\d/, \"/\", /\\d/, /\\d/, /\\d/, /\\d/]\n                    : []\n                }\n                value={endDate}\n                onChange={(e) => this.setState({ endDate: e })}\n                disableOpenOnEnter\n                animateYearScrolling={false}\n                autoOk={true}\n                clearable\n              />\n            </div>\n          </Grid>\n          <button\n            style={{ background: '#f6a821', border: '1px solid #f6a821', marginTop: 20, width: '100px', height: '30px' }}\n            onClick={this.handleFilterBtn}\n          >\n            Filter Report\n            </button>\n          {triggered && actionsBtwDays.length === 0 && isPeriodSelected && <h4>No data found</h4>}\n          {!isPeriodSelected && triggered && 'Select a period First'}\n          {actionsBtwDays.length > 0 && actionsBtwDays.map((item, key) => <TextStrings key={key} item={item} boardName={boardName} memberName={memberName} />)}\n        </MuiPickersUtilsProvider>\n      </div>\n    )\n  }\n}\n\n\nexport default withStyles(styles)(Reporting);\n","// Functions for checking if date exists between the two dates\nconst checkDateRange = (dateFrom, dateTo, dateToCheck) => {\n  var dateFrom  = new Date(dateFrom);\n  var dateTo = new Date(dateTo);\n  var dateCheck = new Date(dateToCheck);\n\n  var from = new Date(\n    dateFrom.getFullYear(),\n    dateFrom.getMonth() - 1,\n    dateFrom.getDate(),\n  );\n  var to = new Date(\n    dateTo.getFullYear(),\n    dateTo.getMonth() - 1,\n    dateTo.getDate(),\n  );\n  var check = new Date(\n    dateCheck.getFullYear(),\n    dateCheck.getMonth() - 1,\n    dateCheck.getDate(),\n  );\n  return check > from && check < to;\n};\n\n// check if ComparisonWith-date is greater then dateTocheck and returns true\nconst DateIsGreater = (comparisonWith,  dateToCheck) => {\n  var comparisonWith  = new Date(comparisonWith);\n  var dateCheck = new Date(dateToCheck);\n\n  var from = new Date(\n    comparisonWith.getFullYear(),\n    comparisonWith.getMonth() - 1,\n    comparisonWith.getDate(),\n    comparisonWith.getHours(),\n    comparisonWith.getMinutes(),\n    comparisonWith.getSeconds(),\n  );\n \n  var check = new Date(\n    dateCheck.getFullYear(),\n    dateCheck.getMonth() - 1,\n    dateCheck.getDate(),\n    dateCheck.getHours(),\n    dateCheck.getMinutes(),\n    dateCheck.getSeconds(),\n  );\n  var result = from > check;\n  return result\n};\n\nexport { checkDateRange ,DateIsGreater} ;","import React from 'react'\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport Login from '../components/Luna/login';\nimport ProtectedRoute from './ProtectedRoute';\nimport Dashboard from '../components/Luna/Dashboard';\nimport Reporting from '../components/Luna/Reporting';\n\nconst Routes = () => {\n  return (\n    <BrowserRouter>\n      <Switch>\n        <Route  path='/' component={Login} />\n        <Route exact path='/dashboard' component={Dashboard} />\n        <Route path='/reports' component={Reporting} />\n        {/* <ProtectedRoute exact path='/dashboard' component={Dashboard} /> */}\n        <Route path=\"*\" component={() => '405 error found'} />\n      </Switch>\n    </BrowserRouter>\n  )\n};\nexport default Routes;","import React, { Fragment } from \"react\";\nimport Routes from \"../../routes\";\n\nconst App = () => (\n  <Fragment>\n    <Routes />\n  </Fragment>\n);\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","/* eslint-disable indent */\nconst initialState = {\n  count: 0,\n  age: 65\n}\n\nconst Reducer = (state = initialState, action) => {\n  const newState = { ...state };\n  switch (action.type) {\n    case 'COUNT_UP':\n      newState.count += action.value;\n      break;\n    case 'COUNT_DOWN':\n      newState.count -= action.value;\n      break;\n    case 'CALLBACK':\n      if (newState.count === 3)\n        newState.count = 100;\n      break;\n    case 'COUNT_T0_1000':\n      newState.count = 1000\n      \n  }\n  return newState;\n}\n\nexport default Reducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './container/App';\n// eslint-disable-next-line no-unused-vars\n// import style from './css/App.less';\n// import 'antd/dist/antd.css'; // or 'antd/dist/antd.less'\n// import 'bootstrap/dist/css/bootstrap.min.css';\n// import './components/Luna_Full_Version_HTML/LESS/style.less'\n// import './components/Luna_Full_Version_HTML/styles/style.css'\n// import 'antd/dist/antd.css'; // or 'antd/dist/antd.less'\n\nimport * as serviceWorker from './serviceWorker';\nimport reducer from './redux/Store/reducer';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk'\nconst store = createStore(reducer, applyMiddleware(thunk));\nserviceWorker.unregister();\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));"],"sourceRoot":""}